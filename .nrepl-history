(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(defn fb-delete
  "Delete data at path. Use with care! Check for at least two /s to prevent deleting something at the root level." 
  [path]
  {:pre [(< 2 (count (clojure.string/split path #"/")))]}
  (->
    (js/firebase.database)
    (.ref path)
    (.delete)))
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(defn fb-delete
  "Delete data at path. Use with care! Check for at least two /s to prevent deleting something at the root level." 
  [path]
  {:pre [(< 2 (count (clojure.string/split path #"/")))]}
  (->
    (js/firebase.database)
    (.ref path)
    (.remove)))
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(fb-delete "/nnangpress/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(fb-delete "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
- (fb-write #js {:hi "there"} (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"))
(defn fb-write 
  "Wite data to firebase path"
  [path data]
  (->
    (js/firebase.database)
    (.ref path)
    (.set (clj->js data))))
- (fb-write #js {:hi "there"} (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"))
l
(fb-write #js {:hi "there"} (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"))
(fb-write (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0") #js {:hi "there"})
(start-repl)
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/2" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/3")
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/2" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/3")
(fb-move "/nangpress-data/route-widgets/userhome/routes-map/widgets/3" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/4")
(defn fb-move
  "Copy data from one path to another and delete data at original place."
  [source dest]
  (go 
    (<! fb-copy)
    (fb-delete source)))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(defn fb-move
  "Copy data from one path to another and delete data at original place."
  [source dest]
  (go 
    (<! fb-copy)
    (fb-delete source)))
(defn fb-delete
  "Delete data at path. Use with care! Check for at least two /s to prevent deleting something at the root level." 
  [path]
  {:pre [(< 2 (count (clojure.string/split path #"/")))]}
  (->
    (js/firebase.database)
    (.ref path)
    (.remove)))
(fb-move "/nangpress-data/route-widgets/userhome/routes-map/widgets/3" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/4")
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/1" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/2")
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/3" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/5")
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/2" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/1")
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! out (firebase-empty->clj-empty
                         (js->clj (.val snapshot) :keywordize-keys true)))))))
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "" (first x))) 
        [] 
        x)) 
    data))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(defn fb-write 
  "Wite data to firebase path"
  [path data]
  (->
    (js/firebase.database)
    (.ref path)
    (.set (clj->js data))))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/4" 
        "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
)
(fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/5" 
        "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1")
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
fb-copy
  (fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/description" 
           "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/description")
  (fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/description" 
           "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/description")
l
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " snapshot)))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.once "value")
    (.then (fn [snapshot] 
             (let [val (.val snapshot)]
               (println "snapshot" (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") (.val snapshot)))
               )
             )))
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.once "value")
    (.then (fn [snapshot] 
             (let [val (.val snapshot)]
               (println "snapshot" (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") (.val snapshot)))
               )
             )))
(let [c (chan)
        _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
        sites (<! c)
        _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
        ]
    sites
    )
(go 
   (let [c (chan)
        _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
        sites (<! c)
        _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
        ]
    sites
    ) 
    )
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (println "sites: " sites)
      ) 
    )
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! out (firebase-empty->clj-empty
                         (js->clj (.val snapshot) :keywordize-keys true)))))))
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "" (first x))) 
        [] 
        x)) 
    data))
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! out (firebase-empty->clj-empty
                         (js->clj (.val snapshot) :keywordize-keys true)))))))
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (println "sites: " sites)
      ) 
    )
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (reset! cache sites)
      (println "sites: " sites)
      ) 
    )
  (def cache (atom []))
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (reset! cache sites)
      (println "sites: " sites)
      ) 
    )
  @cache
  (type @cache)
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
  (def cache (atom []))
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (reset! cache sites)
      (println "sites: " sites)
      ) 
    )
  (type @cache)
  (count @cache)
  (keep-indexed #(= (:name %) "site1-a0c4-35dc-50cf-c825") @cache)
  (keep-indexed #(do 
                   (println (:name %)) 
                   (= (:name %) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (keys (first @cache))
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (map-indexed #(do 
                   (println %) 
                   ) 
                @cache)
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")) 
                @cache)
(keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")
                   (keys %2)) 
                @cache)
(keep-indexed #(do 
                   (println %) 
                   (if 
                     (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")  
                     (keys %2)
                     nil
                     )
                   ) 
                @cache)
(keep-indexed #(do 
                   (println %) 
                   (if 
                     (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")  
                    %1 
                     nil
                     )
                   ) 
                @cache)
(fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/description"
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/description")
l
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
 (fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/description" "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/description") 
l
(nnangpress.navbars/navbar-data 0) 
  (fb-write "/nangpress-data/all-navs-data/0/" (nnangpress.navbars/navbar-data 0))
  (fb-write "/nangpress-data/all-navs-data/1/" (nnangpress.navbars/navbar-data 1))
l
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/data/route-widget/routes-map/children/0/" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/data/route-widget/routes-map/children/0/ ") 
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/data/route-widget/routes-map/children/0/" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/data/route-widget/routes-map/children/0 ") 
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/data/route-widget/routes-map/children" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/data/route-widget/routes-map/children") 
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/description" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/description") 
l
(start-repl)
  (nnangpress.widgetdata/widget-data 1)
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/name" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/site-id")
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/name" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/site-id")
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/name" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/site-id")
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/name" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/site-id")
  (fb-copy 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/3/name" 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/3/site-id")
(nnangpress.widgetdata/widget-data 1)
  (fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/name" 
    (nnangpress.widgetdata/widget-data 1))
  (fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/name" 
    (nnangpress.widgetdata/widget-data 1))
  (fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/name" 
    (nnangpress.widgetdata/widget-data 1))
  (fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/3/name" 
    (nnangpress.widgetdata/widget-data 1))
  (fb-write 
    "/nangpress-data/route-widgets/userhome/routes-map/widgets/1/user-sites/0/name" 
    (nnangpress.widgetdata/widget-data 1))
(u/uid)
(nnangpress.utils/uid)
  (fb-write 
    "/nangpress-data/route-widgets/userhome/routes-map/widgets/1/user-sites/0/site-id" 
    (nnangpress.utils/uid))
(defn fb-update 
  "Update certain items at path without overwriting nodes that aren't referenced."
  [path data]
  (->
    (js/firebase.database)
    (.ref path)
    (.update (clj->js data))))
(nnangpress.widgetdata/widget-data 1)
(fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/3/data/route-widget/logo-data/logo-text/" 
    (nnangpress.widgetdata/widget-data 1))
(fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/3/data/route-widget/routes-map/children/0/route-name-editable" 
    (nnangpress.widgetdata/widget-data 1))
  (fb-write 
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/3/data/route-widget/routes-map/children/0/children/0/route-name-editable" 
    (nnangpress.widgetdata/widget-data 1))
l
(start-repl)
(ns nnangpress.routing
  "Routing for a single page application. The bridge between the route in the browser bar and the application's 
  route state."
  (:import [goog.history Html5History EventType])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [nnangpress.utils :as utls]
            [nnangpress.monolith :as mn]))
  (get-token )
