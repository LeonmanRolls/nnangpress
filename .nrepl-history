(s/valid? ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (mn/new-site-template) 1))
(s/valid? ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (new-site-template) 1))
(s/explain ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (new-site-template) 1))
l
(s/explain ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (new-site-template) 1))
  (s/valid? ::children [])
(s/def ::children (s/cat (s/* ::route-map)))
(s/def ::children (s/cat (s/* :route-map ::route-map)))
(s/def ::children (s/cat :route-map (s/* ::route-map)))
  (s/valid? ::children [])
(clj->js [])
(fb-write 
    "test" 
    (clj->js []) 
    )
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-write 
    "test" 
    (clj->js []) 
    )
(fb-write 
    "test" 
    (clj->js [000]) 
    )
(fb-write 
    "test" 
    (clj->js []) 
    )
l
(+ 2 3)
(def firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(map 
    (fn [x]
     (println x) 
      ) 
    firebase-empty-test)
(def firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(map 
    (fn [x]
     (println x) 
      ) 
    firebase-empty-test)
(map 
    (fn [x]
     (println x) 
      x
      ) 
    firebase-empty-test)
(map 
    (fn [x]
     (println x) 
      x
      ) 
    firebase-empty-test)
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= 000 (first x))) 
        [] 
        x)) 
    data))
(def firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(firebase-empty->clj-empty 
    firebase-empty-test)
(defn clj-empty->firebase-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (empty? x)) 
        [000] 
        x)) 
    data))
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= 000 (first x))) 
        [] 
        x)) 
    data))
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(firebase-empty->clj-empty 
    firebase->clojure-empty-test)
(clj-empty->firebase-empty 
    clojure->firebase-empty-test)
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(clj-empty->firebase-empty 
    clojure->firebase-empty-test)
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "empty" (first x))) 
        [] 
        x)) 
    data))
(defn clj-empty->firebase-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (empty? x)) 
        ["empty"] 
        x)) 
    data))
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(firebase-empty->clj-empty 
    firebase->clojure-empty-test)
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children ["empty"]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children ["empty"]}
                            {:data "hi"
                             :another "there"
                             :children ["empty"]}]}]})
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children ["empty"]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children ["empty"]}
                            {:data "hi"
                             :another "there"
                             :children ["empty"]}]}]})
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(firebase-empty->clj-empty 
    firebase->clojure-empty-test)
(clj-empty->firebase-empty 
    clojure->firebase-empty-test)
  (firebase-empty->clj-empty 
    firebase->clojure-empty-test)
  (def cache (firebase-empty->clj-empty 
               firebase->clojure-empty-test))
cache
  (get-in cache [:children 0 :children])
  (get-in cache [:children 0])
h  (get-in cache [:children 1 :children 0])
  (get-in cache [:children 1 :children 0])
  (get-in cache [:children 1 :children 0 :children])
  (get-in cache [:children 1 :children 1 :children])
l
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
  (fb/clj-empty->firebase-empty new-route-widget)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
  (fb/clj-empty->firebase-empty new-route-widget)
  (fb/clj-empty->firebase-empty (new-route-widget))
(cljs.pprint/pprint
  (fb/clj-empty->firebase-empty (new-route-widget))
    )
  (def cache (fb/clj-empty->firebase-empty (new-route-widget)))
  (get-in cache [:routes-map :children 0 :widgets])
l
(uid)
(first @(uid))
(go 
    (let [c (chan)]
      (get-user-sites @(uid) c)
      (println "get user sites: " (<! c))
      )  
    )
@(uid)
(go 
    (let [c (chan)]
      (get-user-sites (first @(uid)) c)
      (println "get user sites: " (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (fb/firebase-get (str "users/" (first @(uid))) c)
      (println "get user sites: " (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (fb/firebase-get (str "users/" (first @(uid)) "/sites") c)
      (println "get user sites: " (<! c))
      )  
    )
(fb/fb-copy 
   "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"
   "users/test/sites")
(go 
    (let [c (chan)]
      (get-user-sites "test" c)
      (s/valid? (s/coll-of ::site-with-meta) (<! c))
      )  
    )
(defn get-user-sites 
  "Get all the site data for a given user" 
  [uid chan]
  (fb/firebase-get (str "users/" uid "/sites") c))
(go 
    (let [c (chan)]
      (get-user-sites "test" c)
      (s/valid? (s/coll-of ::site-with-meta) (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (get-user-sites "test" c)
      (println (<! c))
      #_(s/valid? (s/coll-of ::site-with-meta) (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (fb/firebase-get (str "users/" (first @(uid)) "/sites") c)
      (println "get user sites: " (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (fb/firebase-get (str "users/" "test" "/sites") c)
      (println "get user sites: " (<! c))
      )  
    )
(defn get-user-sites 
  "Get all the site data for a given user" 
  [uid chan]
  (fb/firebase-get (str "users/" uid "/sites") c))
(defn get-user-sites 
  "Get all the site data for a given user" 
  [uid chan]
  (fb/firebase-get (str "users/" uid "/sites") chan))
(go 
    (let [c (chan)]
      (get-user-sites "test" c)
      (println (<! c))
      #_(s/valid? (s/coll-of ::site-with-meta) (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (get-user-sites "test" c)
      (s/valid? (s/coll-of ::site-with-meta) (<! c))
      )  
    )
(go 
    (let [c (chan)]
      (get-user-sites "test" c)
      (println (s/valid? (s/coll-of ::site-with-meta) (<! c)))
      )  
    )
(defn user-site-index 
  "Get the index of a user's site" 
  [uid site-id out] 
  (let [c (chan)]
    (go 
      (get-user-sites uid c) 
      (u/index-of-key-val (<! c) :site-id site-id))))
(defn user-site-index 
  "Get the index of a user's site" 
  [uid site-id] 
  (let [c (chan)]
    (go 
      (get-user-sites uid c) 
      (u/index-of-key-val (<! c) :site-id site-id))))
(go 
    (let [c (chan)]
      (println (<! (user-site-index "test" "91e87144-cdb9-417a-9074-b7b048771f08")))
      ))
(go 
    (let [c (chan)]
      (println (= 0 (<! (user-site-index "test" "91e87144-cdb9-417a-9074-b7b048771f08"))))
      ))
  (mn/site-meta->renderable td/nangpress-data (new-site-template) 1)
  (site-meta->renderable td/nangpress-data (new-site-template) 1)
  (site-meta->renderable nnangpress.testdata/nangpress-data (new-site-template) 1)
  (def cache (site-meta->renderable nnangpress.testdata/nangpress-data (new-site-template) 1))
  (:site-id-vec cache)
  (keys cache)
(defn site-meta->renderable 
  "Primarily for going from userhome to an end user site." 
  [nangpress-data site-meta & current-user]
  (assoc 
    (if current-user
      (apply nangpress-data->renderable nangpress-data current-user)
      (nangpress-data->renderable nangpress-data))
    :route-widget 
    (:route-widget site-meta)
    :site-id-vec [(:site-id site-meta)]))
  (def cache (site-meta->renderable nnangpress.testdata/nangpress-data (new-site-template) 1))
  (:site-id-vec cache)
(let [new-site (new-site-template)
        cache (site-meta->renderable nnangpress.testdata/nangpress-data new-site 1)]
  (:site-id-vec cache)
    (:site-id new-site)
    
    )
(let [new-site (new-site-template)
        cache (site-meta->renderable nnangpress.testdata/nangpress-data new-site 1)]
  
    
    (= (apply :site-id-vec cache) (:site-id new-site))
    
    )
(let [new-site (new-site-template)
        cache (site-meta->renderable nnangpress.testdata/nangpress-data new-site 1)]
  
    
    (= (first (:site-id-vec cache)) (:site-id new-site))
    
    )
(let [new-site (new-site-template)
        cache (site-meta->renderable nnangpress.testdata/nangpress-data new-site 1)]
  
    
    (= (first (:site-id-vec cache)) (:site-id new-site))
    
    )
