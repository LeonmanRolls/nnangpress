(ns nnangpress.app
  (:require [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]))
 (.log js/console "hi there") 
(.log js/console "hi there")
  (println "hi")
(in-ns 'boot.user)
(.log js/console "hi")
(ns nnangpress.app
  (:require [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]))
monolith
(def monolith (atom {:routes-vector []}))
monolith
(.log js/console "hi")
(start-repl)
(in-ns 'boot.user0
)
(in-ns 'boot.user)
(start-repl)
(.log js/console "hi")
(in-ns 'nnangpress.app)
monolit
monolith
  (s/cat :hi fn?)
(ns nnangpress.app
  (:require [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]
            [clojure.spec :as s]
            ))
  (s/cat :hi fn?)
(.log js/console "hi there")
(start-repl)
(.log js/console "hi there")
(put! input-chan {:msg-type :greeting :text "hello"})
(ns nnangpress.app
  (:require-macros  [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]
            [clojure.spec :as s]
            [cljs.core.async :as cas :refer [>! <! put! chan pub sub]]))
(put! input-chan {:msg-type :greeting :text "hello"})
(def output-chan  (chan))
  (sub our-pub :greeting output-chan)
(go-loop  []
             (let  [{:keys  [text]}  (<! output-chan)]
                   (println text)
                   (recur)))
(put! input-chan {:msg-type :greeting :text "hello"})
(def input-chan (chan))
(def our-pub (pub input-chan :msg-type))
(def output-chan  (chan))
  (sub our-pub :greeting output-chan)
(put! input-chan {:msg-type :greeting :text "hello"})
  (go-loop  []
             (let  [{:keys  [text]}  (<! output-chan)]
                   (println text)
                   (recur)))
(put! input-chan {:msg-type :greeting :text "hello"})
(put! input-chan {:msg-type :greeting :text "hellooo"})
(defn get-token  []
    (str js/window.location.pathname js/window.location.search))
(get-token)
(defn get-token  []
    (str js/window.location.pathname js/window.location.search))
(str nil "hi")
l
(start-repl)
(random-uuid)
(type (random-uuid))
(.toString (random-uuid))
l
(dom/getElement "html")
(gdom/getElement "html")
(in-ns 'nangpress.app)
(gdom/getElement "html")
(ns nnangpress.app
  (:import [goog.history Html5History EventType])
  (:require-macros [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [clojure.spec :as s]
            [cljs.core.async :as cas :refer [>! <! put! chan pub sub]]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [clojure.walk :as wlk]))
(gdom/getElement "html")
(gdom/getElementByTagName "html")
(gdom/TagName. "html")
(-> js/document .-documentElement)
(.dir js/console (-> js/document .-documentElement))
(.dir js/console (-> js/document .-documentElement .-style))
(.dir js/console (-> js/document .-documentElement .-style .-background))
(set!
                       (-> js/document .-documentElement .-style .-background)
                       "url(/img/backgrounds/home_page.jpg) no-repeat center center fixed;"
                       )
(set!
                       (-> js/document .-documentElement .-style .-background)
                       "url(/img/backgrounds/home_page.jpg) no-repeat center center fixed;"
                       )
(set!
                       (-> js/document .-body .-style .-background)
                       "url(/img/backgrounds/home_page.jpg) no-repeat center center fixed;"
                       )
(println (-> js/document .-body .-background))
(.dir js/console (-> js/document .-body .-background))
                     (.dir js/console (-> js/document .-body .-style .-background))
                     (.dir js/console (-> js/document .-body .-style ))
(star-repl)
(repl-start)
(start-repl)
(ns nnangpress.app
  (:import [goog.history Html5History EventType])
  (:require-macros [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [clojure.spec :as s]
            [cljs.core.async :as cas :refer [>! <! put! chan pub sub]]
            [goog.events :as ev]
            [goog.dom :as gdom]))
(js/firebase)
js/firebase
(js/firebase)
js/firebase
  js/defaultAppConfig
js/defaultAppConfig
(-> js/firebase .storage)
  (def defaultstorage (-> js/firebase .storage)) 
defaultstorage
  (def defaultDatabase (-> js/firebase .database)) 
defaultDatabase
l
(js/firebase.auth)
js/firebase.auth
  (defn signInWithPopup []
    (.open js/window "/widget" "Sign In" "width=985,height=735"))
  (signInWithPopup)
  (def ui (js/firebaseui.auth.AuthUi. (js/firebase.auth)))
  (def ui (js/firebaseui.auth.AuthUI. (js/firebase.auth)))
  (defn signInWithPopup []
    (.open js/window "/widget" "Sign In" "width=985,height=735"))
  (signInWithPopup)
(->
    js/document
    (.getElementById "sign-in-with-popup")
    (.addEventListener "click" signInWithPopup))
(.log js/console "hi")
(start-repl)
(defn signInWithPopup []
  (.open js/window "/widget" "Sign In" "width=985,height=735"))
(defn initApp []
  (->
    js/document
    (.getElementById "sign-in-with-popup")
    (.addEventListener "click" signInWithPopup)))
(initApp)
l
(.log js/console "hi")
  (.start ui "#firebase" uiConfig)
(def uiConfig #js {:callbacks #js {:signInSuccess (fn [user credential redirectUrl]
                                                      (println "sucessful sign in")
                                                      (.dir js/console user)
                                                      false
                                                      )}
                     :signInFlow "popup"
                     :signInOptions (array
                                      #js {:provider
                                           js/firebase.auth.EmailAuthProvider.PROVIDER_ID})
                     :tosUrl "https://google.com"
                     })
  (def ui (js/firebaseui.auth.AuthUI. (js/firebase.auth)))
  (.start ui "#firebase" uiConfig)
(def uiConfig #js {:callbacks #js {:signInSuccess (fn [user credential redirectUrl]
                                                      (println "sucessful sign in")
                                                      (.dir js/console user)
                                                      false
                                                      )}
                     :signInFlow "popup"
                     :signInOptions (array
                                      #js {:provider
                                           js/firebase.auth.EmailAuthProvider.PROVIDER_ID})
                     :tosUrl "https://google.com"
                     })
  (def ui (js/firebaseui.auth.AuthUI. (js/firebase.auth)))
  (.start ui "#firebase" uiConfig)
js/firebase.auth.EmailAuthProvider.PROVIDER_ID
l
js/firebase.auth.EmailAuthProvider.PROVIDER_ID
