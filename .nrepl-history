    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
  (:admin-route-widgets td/nangpress-data)
  (s/valid? ::mn/renderable (mn/nangpress-data->renderable td/nangpress-data))  
  (s/explain ::mn/renderable (mn/nangpress-data->renderable td/nangpress-data))  
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn nangpress-data->renderable 
  "Raw nnangpress to renderable based on user auth status"  
  ([nangpress-data]
   (nangpress-data->renderable nangpress-data (fb/current-user)))
  ([nangpress-data current-user]
   (-> 
     (assoc nangpress-data :route-widget (if current-user
                                           (-> nangpress-data :admin-route-widgets :userhome)
                                           (-> nangpress-data :admin-route-widgets :homepage)))
     (update-monolith-user-data current-user)
     (dissoc :admin-route-widgets))))
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
  (keys td/nangpress-data)
  (keys (mn/nangpress-data->renderable td/nangpress-data))  
  (s/valid? ::mn/renderable (mn/nangpress-data->renderable td/nangpress-data))  
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
 (current-user) 
(-> js/firebase .auth .-currentUser)
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn new-site-template
  []
  "Data for displaying on the userhome screen and rendering fully."
  {:name (wd/widget-data 1)
   :description (wd/widget-data 1)
   :site-id (u/uid)
   :screenshot "http://placekitten.com/500/400" 
   :data {:email ["email@email.com"]
          :logo-text (wd/widget-data 16)
          }}
  )
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(mn/new-site-template)  
(mn/new-site-template)
  (s/valid? ::site-with-meta (mn/new-site-template))
  (s/valid? ::mn/site-with-meta (mn/new-site-template))
  (s/explain ::mn/site-with-meta (mn/new-site-template))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(mn/new-site-template)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn new-route-widget 
  "Essentially the simplest nangpress site possible, with a tutorial widget on the homepage." 
  []
  {:logo-data {:logo-style {:fontSize "200%"
                            :textTransform "inherit"}
               :logo-text (wd/widget-data 16)}
   :main-view-style {:style {:dispaly "inherit"
                             :paddingLeft "170px"
                             :paddingRight "170px"}} 
   :nav-style {:backgroundColor "#CE4072"}
   :route-widget-id 0
   :routes-map {:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                            :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                                        :grey-bg? true
                                        :nav-hint ["Architects"]
                                        :nav-hint-style {:color "black"}
                                        :route-name "/child-ola-ola"
                                        :widgets []}]
                            :grey-bg? true
                            :nav-hint ["Architects"]
                            :nav-hint-style {:color "black"}
                            :route-name "/parent-ola-ola"
                            :widgets []}]
                :grey-bg? true
                :nav-hint ["Architects"] 
                :nav-hint-style {:color "black"}
                :route-name "/"
                :widgets [(wd/widget-data 15)]}})
(defn new-site-template
  []
  "Data for displaying on the userhome screen and rendering fully."
  {:name (wd/widget-data 1)
   :description (wd/widget-data 1)
   :site-id (u/uid)
   :screenshot "http://placekitten.com/500/400" 
   :route-widget (new-route-widget)})
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(mn/new-site-template)
  (s/valid? ::mn/site-with-meta (mn/new-site-template))
(mn/new-site-template)
  (:route-widget (mn/new-site-template))
  (mn/nangpress-data->renderable)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn nangpress-data->renderable 
  "Raw nnangpress to renderable based on user auth status"  
  ([]
   (let [current-user (-> js/firebase .auth .-currentUser)
         c (chan)
         _ (fb/firebase-get "nangpress-data/" c)
         nangpress-data (<! c)]
     (nangpress-data->renderable nangpress-data current-user)))
  ([nangpress-data]
   (nangpress-data->renderable nangpress-data (fb/current-user)))
  ([nangpress-data current-user]
   (-> 
     (assoc nangpress-data :route-widget (if current-user
                                           (-> nangpress-data :admin-route-widgets :userhome)
                                           (-> nangpress-data :admin-route-widgets :homepage)))
     (update-monolith-user-data current-user)
     (dissoc :admin-route-widgets))))
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(mn/nangpress-data->renderable)
(assoc 
    td/nangpress-data 
    :route-widget 
    (:route-widget (mn/new-site-template))
    )
(s/valid? 
    ::mn/renderable 
    (assoc 
      td/nangpress-data 
      :route-widget 
      (:route-widget (mn/new-site-template)))  
    )
(:route-widget (mn/new-site-template))
(s/explain 
    ::mn/renderable 
    (assoc 
      td/nangpress-data 
      :route-widget 
      (:route-widget (mn/new-site-template))))
(s/explain 
    ::mn/renderable 
    (assoc 
      (mn/nangpress-data->renderable td/nangpress-data nil)
      :route-widget 
      (:route-widget (mn/new-site-template))))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn site-meta->renderable 
  "Primarily for going from userhome to an end user site." 
  [nangpress-data site-meta]
  (assoc 
    (mn/nangpress-data->renderable nangpress-data)
    :route-widget 
    (:route-widget (mn/new-site-template))))
(defn site-meta->renderable 
  "Primarily for going from userhome to an end user site." 
  [nangpress-data site-meta]
  (assoc 
    (nangpress-data->renderable nangpress-data)
    :route-widget 
    (:route-widget site-meta)))
(defn site-meta->renderable 
  "Primarily for going from userhome to an end user site." 
  [nangpress-data site-meta]
  (assoc 
    (nangpress-data->renderable nangpress-data)
    :route-widget 
    (:route-widget site-meta)))
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(s/valid? 
    ::mn/renderable 
    (mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template))))
(mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template)))
(s/explain 
    ::mn/renderable 
    (mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template))))
(mn/new-site-template)
(:route-widget (mn/new-site-template))
(keys 
    (mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template))))
(:route-widget 
(mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template)))
    )
(:route-widget (mn/new-site-template))
(s/valid? 
    ::mn/renderable 
    (mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template))))
(s/valid? 
    ::mn/renderable 
    (assoc 
      td/nangpress-data 
      :route-widget 
      (:route-widget (mn/new-site-template))))
(s/explain 
    ::mn/renderable 
    (assoc 
      (mn/nangpress-data->renderable td/nangpress-data nil)
      :route-widget 
      (:route-widget (mn/new-site-template))))
(s/explain 
    ::mn/renderable 
    (assoc 
      (mn/nangpress-data->renderable td/nangpress-data)
      :route-widget 
      (:route-widget (mn/new-site-template))))
(mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template)))
(mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template)))
(:route-widget (mn/new-site-template))
(mn/site-meta->renderable 
      td/nangpress-data
      (:route-widget (mn/new-site-template)))
  (cljs.pprint/pprint "hi there")
(cljs.pprint/pprint (mn/site-meta->renderable 
                        td/nangpress-data
                        (:route-widget (mn/new-site-template))))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn site-meta->renderable 
  "Primarily for going from userhome to an end user site." 
  [nangpress-data site-meta]
  (assoc 
    (nangpress-data->renderable nangpress-data)
    :route-widget 
    (:route-widget site-meta)))
(ns nnangpress.monolith-test
  (:require 
    [cljs.spec.test :as ts :include-macros true]
    [cljs.test :refer-macros [deftest is testing run-tests]]
    [cljs.spec :as s]
    [nnangpress.testdata :as td]
    [nnangpress.monolith :as mn]
    [nnangpress.widgets :as wgt]))
(cljs.pprint/pprint (mn/site-meta->renderable 
                        td/nangpress-data
                        (:route-widget (mn/new-site-template))))
(cljs.pprint/pprint (mn/site-meta->renderable 
                        td/nangpress-data
                        (mn/new-site-template)))
(s/valid? 
    ::mn/renderable 
    (mn/site-meta->renderable 
      td/nangpress-data
      (mn/new-site-template)))
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(current-user)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn new-route-widget 
  "Essentially the simplest nangpress site possible, with a tutorial widget on the homepage." 
  []
  {:logo-data {:logo-style {:fontSize "200%"
                            :textTransform "inherit"}
               :logo-text (wd/widget-data 16)}
   :main-view-style {:style {:dispaly "inherit"
                             :paddingLeft "170px"
                             :paddingRight "170px"}} 
   :nav-style {:backgroundColor "#CE4072"}
   :route-widget-id 0
   :routes-map {:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                            :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                                        :grey-bg? true
                                        :nav-hint ["Architects"]
                                        :nav-hint-style {:color "black"}
                                        :route-name "/child-ola-ola"
                                        :route-name-editable (wd/widget-data 16)
                                        :widgets []}]
                            :grey-bg? true
                            :nav-hint ["Architects"]
                            :nav-hint-style {:color "black"}
                            :route-name "/parent-ola-ola"
                            :route-name-editable (wd/widget-data 16)
                            :widgets []}]
                :grey-bg? true
                :nav-hint ["Architects"] 
                :nav-hint-style {:color "black"}
                :route-name "/"
                :route-name-editable (wd/widget-data 16)
                :widgets [(wd/widget-data 15)]}})
(s/valid? ::route-widget (new-route-widget))  
(s/valid? ::route-widget {})  
(s/def ::route-widget (s/keys :req-un [::logo-data ::main-view-style ::nav-style ::route-widget-id ::routes-map]))
(s/valid? ::route-widget (new-route-widget))  
(s/valid? ::route-widget {})  
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/logo-data" 
    "/nangpress-data/admin-route-widgets/homepage/routes-map/logo-data")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/logo-data" 
    "/nangpress-data/admin-route-widgets/userhome/routes-map/logo-data")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/nav-style" 
    "/nangpress-data/admin-route-widgets/homepage/nav-style")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/nav-style" 
    "/nangpress-data/admin-route-widgets/userhome/nav-style")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/grey-bg?" 
    "/nangpress-data/admin-route-widgets/userhome/routes-map/grey-bg?")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/grey-bg?" 
    "/nangpress-data/admin-route-widgets/homepage/routes-map/grey-bg?")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/route-name-editable" 
    "/nangpress-data/admin-route-widgets/homepage/routes-map/route-name-editable")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/route-name-editable" 
    "/nangpress-data/admin-route-widgets/userhome/routes-map/route-name-editable")
(fb-copy
    "/nangpress-data/admin-route-widgets/userhome/routes-map/logo-data"
    "/nangpress-data/admin-route-widgets/userhome/logo-data")
(fb-copy
    "/nangpress-data/admin-route-widgets/homepage/routes-map/logo-data"
    "/nangpress-data/admin-route-widgets/homepage/logo-data")
