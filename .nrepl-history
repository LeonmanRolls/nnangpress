(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (reset! cache remote-map)
               (println "remote map: " remote-map)))))
l
@cache
@mn/monolith
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
    (clj->js @mn/monolith))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
  (new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
    (clj->js @mn/monolith))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
    (clj->js {:name "site1"
              :description "A site"
              :data @mn/monolith}))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1"
    (clj->js {:name "site2"
              :description "Another site"
              :data @mn/monolith}))
(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (reset! cache remote-map)
               (println "remote map: " remote-map)))))
@cache
l
(empty? "")
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(new-route
    "nangpress-data/"
    (clj->js {:name "site2"
              :description "Another site"
              :data @mn/monolith}))
  (new-route
    "nangpress-data/"
    (clj->js @mn/monolith))
(new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js @mn/monolith))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
  (new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js @mn/monolith))
@mn/monolith
(:route-widget @mn/monolith)
(new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js (:route-widget @mn/monolith)))
  (new-route
    "nangpress-data/route-widgets/userhome"
    (clj->js (:route-widget @mn/monolith)))
  (new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js (:route-widget @mn/monolith)))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
)
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
 mn/monlith 
 mn/monolith 
  (keys mn/monolith)
  (keys @mn/monolith)
  (:all-widgets-data @mn/monolith)
@mn/monolith
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
:wgts/img
  (s/valid? :wgts/widget-data sample-data)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [clojure.spec :as s]))
  (s/valid? :wgts/widget-data sample-data)
  (def sample-data {:widget-uid 001
                    :object-id "23489-23fd9-sdf23-234hjh" 
                    :widget-name "Standard text widget"
                    :inner-html ["<p> Hi there </p>"]})
  (s/valid? :wgts/widget-data sample-data)
  (s/valid? :nnangpress.widgets/widget-data sample-data)
  (def sample-data {:widgetuid 001
                    :object-id "23489-23fd9-sdf23-234hjh" 
                    :widget-name "Standard text widget"
                    :inner-html ["<p> Hi there </p>"]})
  (s/valid? :nnangpress.widgets/widget-data sample-data)
  (def sample-data {:widget-uid 2
                    :object-id (u/uid)
                    :imgs [{:object-id (u/uid)
                            :url "http://placekitten.com/900/600"}
                           {:object-id (u/uid)
                            :url "http://placekitten.com/900/600"}]})
  (s/valid? :nnangpress.widgets/widget-data sample-data)
  (s/valid? ::wgts/widget-data sample-data)
  (s/def ::all-widgets-data (s/coll-of ::wgts/widget-data)  )
(:all-widgets-data @mn/monolith)
  (s/valid? ::all-widgets-data (:all-widgets-data @mn/monolith))
[sample-data]
  (s/valid? ::all-widgets-data [sample-data])
  (s/valid? ::all-widgets-data sample-data)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]))
  (s/checkable-syms)
  (s/instrument-all)
  (ts/instrument-all)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts]))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :refer-macros true]))
q
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
(start-repl)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
  (ts/instrument-all)
  (ts/instrumentable-syms)
  (ts/instrument)
  (ts/instrumentable-syms)
  (ts/instrument)
  (ts/instrumentable-syms)
  (ts/instrument
  (ts/instrumentable-syms)
    )
q
(ts/instrumentable-syms)
  (ts/instrumentable-syms)
(ts/instrument
    'nnangpress.monolith
    )
  (ts/instrumentable-syms)
  (ts/instrument
    'nnangpress.monolith/update-all
    )
  (ts/instrument
    'nnangpress.monolith
    )
  (vector? [])
(start-repl)
l
(empty? [""])
(empty? [])
l
(ns nnangpress.app
  (:import [goog.history Html5History EventType])
  (:require-macros [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.monolith :as mn]
            [nnangpress.navbars :as nv]
            [nnangpress.widgets :as wgt]
            [nnangpress.core :as cre]
            [nnangpress.utils :as u]
            [nnangpress.routing :as rt]
            [cljs.reader :as rdr]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s :include-macros true]
            [cljs.spec.test :as ts :include-macros true]))
@cache
  @cache  
(ns nnangpress.app
  (:import [goog.history Html5History EventType])
  (:require-macros [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.monolith :as mn]
            [nnangpress.navbars :as nv]
            [nnangpress.widgets :as wgt]
            [nnangpress.core :as cre]
            [nnangpress.utils :as u]
            [nnangpress.routing :as rt]
            [cljs.reader :as rdr]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s :include-macros true]
            [cljs.spec.test :as ts :include-macros true]
            [clojure.walk :as wlk]))
  (wlk/postwalk-demo testes)
(ns nnangpress.app
  (:import [goog.history Html5History EventType])
  (:require-macros [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.monolith :as mn]
            [nnangpress.navbars :as nv]
            [nnangpress.widgets :as wgt]
            [nnangpress.core :as cre]
            [nnangpress.utils :as u]
            [nnangpress.routing :as rt]
            [cljs.reader :as rdr]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s :include-macros true]
            [cljs.spec.test :as ts :include-macros true]
            [clojure.walk :as wlk :include-macros true]))
  (wlk/postwalk-demo testes)
  (wlk/postwalk testes)
  (wlk/postwalk prn testes)
(def testes {:route-name (str "/parent" (subs (u/uid) 0 3))
               :bg-img "from_uss.jpg"
               :grey-bg? true
               :nav-hint ["nav hint"]
               :nav-hint-style {:color "white"}
               :widgets [{:widget-uid 001
                          :object-id (u/uid)
                          :widget-name "Standard text widget"
                          :inner-html ["<p> Hi there </p>"]}]
               :children [{:route-name (str "/child" (subs (u/uid) 0 3))
                           :bg-img "from_uss.jpg"
                           :grey-bg? true
                           :nav-hint ["nav hint"]
                           :nav-hint-style {:color "white"}
                           :widgets [{:widget-uid 001
                                      :object-id (u/uid)
                                      :widget-name "Standard text widget"
                                      :inner-html ["<p> Hi there </p>"]}]
                           :children []}]} )
  (wlk/postwalk prn testes)
  (wlk/postwalk println testes)
  (wlk/postwalk identity testes)
  (wlk/postwalk (fn [x] (println x)) testes)
  (wlk/postwalk println testes)
(wlk/postwalk 
    (fn [x]   
      (if 
        (and (vector? x) (= 1 (count x)) (= "" (first x))) 
        [] 
        x)) 
    testes)
(def testes {:route-name (str "/parent" (subs (u/uid) 0 3))
               :bg-img "from_uss.jpg"
               :grey-bg? true
               :nav-hint ["nav hint"]
               :nav-hint-style {:color "white"}
               :widgets [{:widget-uid 001
                          :object-id (u/uid)
                          :widget-name "Standard text widget"
                          :inner-html ["<p> Hi there </p>"]}]
               :children [{:route-name (str "/child" (subs (u/uid) 0 3))
                           :bg-img "from_uss.jpg"
                           :grey-bg? true
                           :nav-hint ["nav hint"]
                           :nav-hint-style {:color "white"}
                           :widgets [""]
                           :children [""]}]})
(wlk/postwalk 
    (fn [x]   
      (if 
        (and (vector? x) (= 1 (count x)) (= "" (first x))) 
        [] 
        x)) 
    testes)
testes
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "" (first x))) 
        [] 
        x)) 
    data))
  (firebase-empty->clj-empty testes)
(defn clj-empty->firebase-empty 
  "Opposite of firebase-empty->clj-empty" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (empty? x)) 
        [""] 
        x)) 
    data))
(def testes {:route-name (str "/parent" (subs (u/uid) 0 3))
               :bg-img "from_uss.jpg"
               :grey-bg? true
               :nav-hint ["nav hint"]
               :nav-hint-style {:color "white"}
               :widgets [{:widget-uid 001
                          :object-id (u/uid)
                          :widget-name "Standard text widget"
                          :inner-html ["<p> Hi there </p>"]}]
               :children [{:route-name (str "/child" (subs (u/uid) 0 3))
                           :bg-img "from_uss.jpg"
                           :grey-bg? true
                           :nav-hint ["nav hint"]
                           :nav-hint-style {:color "white"}
                           :widgets []
                           :children []}]})
  (clj-empty->firebase-empty testes)
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
(-> js/firebase .auth .-currentUser)
  (def current-user (-> js/firebase .auth .-currentUser))
  (def db (js/firebase.database))
  (def data-ref (.ref db (str "users/")))
current-user
(.-uid current-user)
  (def uid (.-uid current-user))
uid
  (def data-ref (.ref db (str "users/" uid)))
(->
    data-ref
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (mn/firebase-empty->clj-empty
                                (js->clj (.val snapshot) :keywordize-keys true))]
                  (println remote-map)        
                            
               ))))
l
  (def cache (atom []))
(->
    data-ref
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (mn/firebase-empty->clj-empty
                                (js->clj (.val snapshot) :keywordize-keys true))]
                  (println remote-map)        
               (reset! cache remote-map)
               ))))
l
@cache
  (keys @cache)
  (:sites @cache)
(to-array 
    (:sites @cache)
    )
(.indexOf 
  (to-array 
    (:sites @cache))  
    (fn [x]
     (= (.-name x) "site1") 
      ))
(.indexOf 
    (to-array 
      (:sites @cache))  
    (fn [x]
      (println (.-name x))
      (= (.-name x) "site1") 
      ))
(defn index-of [s v]
    (loop [idx 0 items s]
      (println items)
      (cond
        (empty? items) nil
        (= v (first items)) idx
        :else (recur (inc idx) (rest items)))))
  (index-of (:sites @cache) "")
(:sites @cache)
(defn index-of [s v]
    (loop [idx 0 items s]
      (println (count items))
      (cond
        (empty? items) nil
        (= v (first items)) idx
        :else (recur (inc idx) (rest items)))))
  (index-of (:sites @cache) "")
(defn index-of [s v]
    (loop [idx 0 items s]
      (println (count items))
      (cond
        (empty? items) nil
        (= "site1" (:name (first items))) idx
        :else (recur (inc idx) (rest items)))))
  (index-of (:sites @cache) "")
(defn index-of [s v]
    (loop [idx 0 items s]
      (println (count items))
      (cond
        (empty? items) nil
        (= "site2" (:name (first items))) idx
        :else (recur (inc idx) (rest items)))))
  (index-of (:sites @cache) "")
(defn index-of-key-val [s key val]
    (loop [idx 0 items s]
      (println (count items))
      (cond
        (empty? items) nil
        (= val (key (first items))) idx
        :else (recur (inc idx) (rest items)))))
  (index-of-key-val (:sites @cache) :name "site1")
  (index-of-key-val (:sites @cache) :name "site2")
