            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(:site-id-vec @(all-data))
(:uid @(all-data))
  (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data))))
(println 
    (<! 
      (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(:uid @(all-data))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(first (:uid @(all-data)))
(first (:site-id-vec @(all-data)))
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(defn site-owner?
  ""
  [user-uid site-id]
  (cond 
    (empty? user-id)  false
    :else (go 
            (u/coll-contains? (<! (get-users-site-ids user-uid)) site-id))))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(defn site-owner?
  ""
  [user-uid site-id]
  (go 
    (cond 
      (empty? user-id)  false
      :else (u/coll-contains? (<! (get-users-site-ids user-uid)) site-id))))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data))))
(<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(:uid @(all-data))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(first (:uid @(all-data)))
(first (:site-id-vec @(all-data)))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
fb/site-owner?
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(use 'nnangpress.monolith :reload)
l
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
  (load-namespace 'nnangpress.monolith)
(all-data)
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (nnangpress.firebase/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
  (load-namespace 'nnangpress.firebase)
  (load-namespace 'nnangpress.monolith)
(go
    (println 
      (<! 
        (/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
l
(go
    (println 
      (<! 
        (/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
  (load-namespace 'nnangpress.firebase)
(defn site-owner?
  ""
  [user-uid site-id]
  (go 
    (cond 
      (empty? user-uid)  false
      :else (u/coll-contains? (<! (get-users-site-ids user-uid)) site-id))))
  (load-namespace 'nnangpress.monolith)
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
  (load-namespace 'nnangpress.monolith)
(start-repl)
  (load-namespace 'nnangpress.monolith)
live-site?
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
live-site?
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(first (:uid @(all-data)))
(first (:site-id-vec @(all-data)))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(ns nnangpress.utils
  (:require [clojure.string :as stg]))
(coll-contains? [1 2 3] 1)
(coll-contains? [1 2 3] 0)
(defn coll-contains? 
  "This exists because core contains? only works on maps."
  [coll x]
  (if (some #(= x %) coll) true false))
(coll-contains? [1 2 3] 0)
(coll-contains? [1 2 3] 1)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(go
    (println 
      (<! 
        (fb/site-owner? (first (:uid @(all-data))) (first (:site-id-vec @(all-data)))))))
(user-email)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(nnangpress.monolith/new-site-template)
(fb-write
    "/nangpress-data/admin-sites/"
    (nnangpress.monolith/new-site-template))
(fb-write
    "/nangpress-data/admin-sites/homepage"
    (nnangpress.monolith/new-site-template))
(fb-write
    "/nangpress-data/admin-sites/userhome"
    (nnangpress.monolith/new-site-template))
(fb-copy
    "/nangpress-data/admin-route-widgets/homepage/" 
    "/nangpress-data/admin-sites/homepage/route-widget/" 
    )
(fb-copy
    "/nangpress-data/admin-route-widgets/userhome/" 
    "/nangpress-data/admin-sites/userhome/route-widget/" 
    )
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
  (firebase-get "/users")
  (println (<! (firebase-get "/users")))
(go 
  (println (<! (firebase-get "/users")))
    )
(go 
    (let [c (chan)]
      (firebase-get "/users" c)
      (println (<! c))
      )
    )
(go 
    (let [c (chan)]
      (firebase-get "/users" c)
      (println (map first (<! c)))
      )
    )
(go 
    (let [c (chan)]
      (firebase-get "/users" c)
      (println (keys (<! c)))
      )
    )
(.log js/console "hi there")
(go 
    (let [c (chan)]
      (firebase-get "/users" c)
      (println (keys (<! c)))
      )
    )
      (println (map name (keys (<! c))))
(go 
    (let [c (chan)]
      (firebase-get "/users" c)
      (println (map name (keys (<! c))))
      )
    )
(defn current-users 
  "Potential for performance issues as child nodes are being returned. "
  []
  (go 
    (let [c (chan)
          _  (firebase-get "/users" c)]
      (map str (keys (<! c))))))
(go 
    (println (<! (current-users)))
    )
  (map (comp str name) [:hi :there])
  (map (comp str ) [:hi :there])
(defn current-users 
  "Potential for performance issues as child nodes are being returned. "
  []
  (go 
    (let [c (chan)
          _  (firebase-get "/users" c)]
      (map (comp str name) (keys (<! c))))))
(go 
    (println (<! (current-users)))
    )
(go 
    (println 
      (<! (current-users))
      )
    )
(go 
    (println 
      (coll-contains? "test" (<! (current-users)))
      )
    )
(go 
    (println 
      (u/coll-contains? "test" (<! (current-users)))
      )
    )
(go 
    (println 
      (u/coll-contains? (<! (current-users)) "test")
      )
    )
(go 
    (println 
      (u/coll-contains? (<! (current-users)) "test")
      )
    )
(go 
    (println 
      (not (u/coll-contains? (<! (current-users)) "test"))
      )
    )
(go 
    (println 
      (not (u/coll-contains? (<! (current-users)) "blabla"))
      )
    )
(defn new-user? 
  "" 
  []
  (go 
    (not (u/coll-contains? (<! (current-users)) "blabla"))))
(go 
   (<! (new-user? "test")) 
    )
(go 
   (prn (<! (new-user? "test"))) 
    )
(defn new-user? 
  "" 
  [uid]
  (go 
    (not (u/coll-contains? (<! (current-users)) uid))))
(go 
   (prn (<! (new-user? "test"))) 
    )
(go 
   (prn (<! (new-user? "testest"))) 
    )
