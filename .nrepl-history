  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [cljs.core.async :refer [put! chan <!]]
            [nnangpress.monolith :as mn]))
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! 
               out 
               (mn/firebase-empty->clj-empty
                 (js->clj (.val snapshot) :keywordize-keys true)))))))
(ns nnangpress.repl
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [nnangpress.firebase :as fb]
            [cljs.reader :as rdr]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]
            [cljs.core.async :refer [put! chan <!]]))
(let [c (chan)]
  (go 
    (fb/firebase-get "nangpress-data/" c)
    (println "rtn" (<! c))))
(let [c (chan)]
  (go 
    (fb/firebase-get "nangpress-data/site-name" c)
    (println "rtn" (<! c))))
(start-repl)
(ns nnangpress.repl
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [nnangpress.firebase :as fb]
            [cljs.reader :as rdr]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]
            [cljs.core.async :refer [put! chan <!]]))
(mn/site-name)
(all-data_
)
(all-data)
(mn/all-data)
(= false #{})
(tag)
tag
(while true
    (let [imax (first (apply max-key second (map-indexed vector '(1 2 3 4 5 6 7 8))))]
      max))
(+ 2 3)
(while true
    (let [imax (first (apply max-key second (map-indexed vector '(1 2 3 4 5 6 7 8))))]
      max))
(let [imax (first (apply max-key second (map-indexed vector '(1 2 3 4 5 6 7 8))))]
      max)
(println "hi there")
(let [imax (first (apply max-key second (map-indexed vector '(1 2 3 4 5 6 7 8))))]
      max)
(let [imax (first (apply max-key second (map-indexed vector '(1 2 3 4 5 6 7 8))))]
      imax)
(apply max-key second (map-indexed vector '(1 2 3 4 5 6 7 8)))
(boot (marginalia))
(docs (marginalia))
(doc (marginalia))
(start-repl)
(ns nnangpress.app
  "Start here"
  (:import [goog.history Html5History EventType])
  (:require-macros [cljs.core.async.macros :refer  [go go-loop]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.monolith :as mn]
            [nnangpress.navbars :as nv]
            [nnangpress.widgets :as wgt]
            [nnangpress.core :as cre]
            [nnangpress.utils :as u]
            [nnangpress.routing :as rt]
            [nnangpress.firebase :as fb]
            [cljs.reader :as rdr]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s :include-macros true]
            [cljs.spec.test :as ts :include-macros true]
            [cljs.core.async :refer [put! chan <!]]
            [cemerick.url :as url]))
(get-query-params<)
    (get (get-query-params<) "dev")
(doc defmulti)
(start-repl)
(doc defmulti)
(doc defmethod)
(+ 2 3)
(start-repl)
(+ 2 3)
(in-ns 'nnangpress.firebase)
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(defn fb-delete
  "Delete data at path. Use with care! Check for at least two /s to prevent deleting something at the root level." 
  [path]
  {:pre [(< 2 (count (clojure.string/split path #"/")))]}
  (->
    (js/firebase.database)
    (.ref path)
    (.delete)))
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(defn fb-delete
  "Delete data at path. Use with care! Check for at least two /s to prevent deleting something at the root level." 
  [path]
  {:pre [(< 2 (count (clojure.string/split path #"/")))]}
  (->
    (js/firebase.database)
    (.ref path)
    (.remove)))
(fb-delete "/nnangpress/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(fb-delete "/nnangpress/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
(fb-delete "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0")
- (fb-write #js {:hi "there"} (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"))
(defn fb-write 
  "Wite data to firebase path"
  [path data]
  (->
    (js/firebase.database)
    (.ref path)
    (.set (clj->js data))))
- (fb-write #js {:hi "there"} (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"))
l
(fb-write #js {:hi "there"} (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"))
(fb-write (str "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0") #js {:hi "there"})
(start-repl)
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/2" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/3")
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/2" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/3")
(fb-move "/nangpress-data/route-widgets/userhome/routes-map/widgets/3" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/4")
(defn fb-move
  "Copy data from one path to another and delete data at original place."
  [source dest]
  (go 
    (<! fb-copy)
    (fb-delete source)))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(defn fb-move
  "Copy data from one path to another and delete data at original place."
  [source dest]
  (go 
    (<! fb-copy)
    (fb-delete source)))
(defn fb-delete
  "Delete data at path. Use with care! Check for at least two /s to prevent deleting something at the root level." 
  [path]
  {:pre [(< 2 (count (clojure.string/split path #"/")))]}
  (->
    (js/firebase.database)
    (.ref path)
    (.remove)))
(fb-move "/nangpress-data/route-widgets/userhome/routes-map/widgets/3" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/4")
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/1" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/2")
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/3" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/5")
(fb-copy "/nangpress-data/route-widgets/userhome/routes-map/widgets/2" 
 "/nangpress-data/route-widgets/userhome/routes-map/widgets/1")
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! out (firebase-empty->clj-empty
                         (js->clj (.val snapshot) :keywordize-keys true)))))))
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "" (first x))) 
        [] 
        x)) 
    data))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(defn fb-write 
  "Wite data to firebase path"
  [path data]
  (->
    (js/firebase.database)
    (.ref path)
    (.set (clj->js data))))
(defn fb-copy 
  "Copy data from one path to another"
  [source dest]
  (let [c (chan)]
    (go 
      (firebase-get source c)
      (fb-write dest (<! c)))))
(fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/4" 
        "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
)
(fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/5" 
        "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1")
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
fb-copy
  (fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/description" 
           "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1/description")
  (fb-copy "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/description" 
           "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/2/description")
l
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " snapshot)))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.equalTo "site1-a0c4-35dc-50cf-c825")
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.orderByValue)
    (.once "value")
    (.then (fn [snapshot] (println "snapshot: " (.val snapshot))))
    )
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.once "value")
    (.then (fn [snapshot] 
             (let [val (.val snapshot)]
               (println "snapshot" (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") (.val snapshot)))
               )
             )))
(->
    (js/firebase.database)
    (.ref "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites")
    (.once "value")
    (.then (fn [snapshot] 
             (let [val (.val snapshot)]
               (println "snapshot" (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") (.val snapshot)))
               )
             )))
(let [c (chan)
        _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
        sites (<! c)
        _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
        ]
    sites
    )
(go 
   (let [c (chan)
        _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
        sites (<! c)
        _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
        ]
    sites
    ) 
    )
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (println "sites: " sites)
      ) 
    )
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! out (firebase-empty->clj-empty
                         (js->clj (.val snapshot) :keywordize-keys true)))))))
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "" (first x))) 
        [] 
        x)) 
    data))
(defn firebase-get
  "Get data from firebase database by route"  
  [route out] 
  (->
    (.ref (js/firebase.database) route)
    (.once "value")
    (.then (fn [snapshot]
             (put! out (firebase-empty->clj-empty
                         (js->clj (.val snapshot) :keywordize-keys true)))))))
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (println "sites: " sites)
      ) 
    )
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (reset! cache sites)
      (println "sites: " sites)
      ) 
    )
  (def cache (atom []))
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (reset! cache sites)
      (println "sites: " sites)
      ) 
    )
  @cache
  (type @cache)
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
  (def cache (atom []))
(go 
    (let [c (chan)
          _ (firebase-get "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites" c ) 
          sites (<! c)
          _ (filter #(= (:name %) "site1-a0c4-35dc-50cf-c825") sites)
          ]
      (reset! cache sites)
      (println "sites: " sites)
      ) 
    )
  (type @cache)
  (count @cache)
  (keep-indexed #(= (:name %) "site1-a0c4-35dc-50cf-c825") @cache)
  (keep-indexed #(do 
                   (println (:name %)) 
                   (= (:name %) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (keys (first @cache))
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (map-indexed #(do 
                   (println %) 
                   ) 
                @cache)
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825")) 
                @cache)
  (keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")) 
                @cache)
(keep-indexed #(do 
                   (println %) 
                   (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")
                   (keys %2)) 
                @cache)
(keep-indexed #(do 
                   (println %) 
                   (if 
                     (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")  
                     (keys %2)
                     nil
                     )
                   ) 
                @cache)
(keep-indexed #(do 
                   (println %) 
                   (if 
                     (= (:name %2) "site1-a0c4-35dc-50cf-c825-bf6b-1a26")  
                    %1 
                     nil
                     )
                   ) 
                @cache)
