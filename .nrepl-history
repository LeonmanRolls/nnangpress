                        (mn/new-site-template)))
(s/valid? 
    ::mn/renderable 
    (mn/site-meta->renderable 
      td/nangpress-data
      (mn/new-site-template)))
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(current-user)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(defn new-route-widget 
  "Essentially the simplest nangpress site possible, with a tutorial widget on the homepage." 
  []
  {:logo-data {:logo-style {:fontSize "200%"
                            :textTransform "inherit"}
               :logo-text (wd/widget-data 16)}
   :main-view-style {:style {:dispaly "inherit"
                             :paddingLeft "170px"
                             :paddingRight "170px"}} 
   :nav-style {:backgroundColor "#CE4072"}
   :route-widget-id 0
   :routes-map {:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                            :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                                        :grey-bg? true
                                        :nav-hint ["Architects"]
                                        :nav-hint-style {:color "black"}
                                        :route-name "/child-ola-ola"
                                        :route-name-editable (wd/widget-data 16)
                                        :widgets []}]
                            :grey-bg? true
                            :nav-hint ["Architects"]
                            :nav-hint-style {:color "black"}
                            :route-name "/parent-ola-ola"
                            :route-name-editable (wd/widget-data 16)
                            :widgets []}]
                :grey-bg? true
                :nav-hint ["Architects"] 
                :nav-hint-style {:color "black"}
                :route-name "/"
                :route-name-editable (wd/widget-data 16)
                :widgets [(wd/widget-data 15)]}})
(s/valid? ::route-widget (new-route-widget))  
(s/valid? ::route-widget {})  
(s/def ::route-widget (s/keys :req-un [::logo-data ::main-view-style ::nav-style ::route-widget-id ::routes-map]))
(s/valid? ::route-widget (new-route-widget))  
(s/valid? ::route-widget {})  
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/logo-data" 
    "/nangpress-data/admin-route-widgets/homepage/routes-map/logo-data")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/logo-data" 
    "/nangpress-data/admin-route-widgets/userhome/routes-map/logo-data")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/nav-style" 
    "/nangpress-data/admin-route-widgets/homepage/nav-style")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/nav-style" 
    "/nangpress-data/admin-route-widgets/userhome/nav-style")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/grey-bg?" 
    "/nangpress-data/admin-route-widgets/userhome/routes-map/grey-bg?")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/grey-bg?" 
    "/nangpress-data/admin-route-widgets/homepage/routes-map/grey-bg?")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/route-name-editable" 
    "/nangpress-data/admin-route-widgets/homepage/routes-map/route-name-editable")
(fb-copy
    "/users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0/route-widget/routes-map/route-name-editable" 
    "/nangpress-data/admin-route-widgets/userhome/routes-map/route-name-editable")
(fb-copy
    "/nangpress-data/admin-route-widgets/userhome/routes-map/logo-data"
    "/nangpress-data/admin-route-widgets/userhome/logo-data")
(fb-copy
    "/nangpress-data/admin-route-widgets/homepage/routes-map/logo-data"
    "/nangpress-data/admin-route-widgets/homepage/logo-data")
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
(s/valid? ::route-map (new-route-widget))
(s/explain-data ::route-map (new-route-widget))
(s/explain ::route-map (new-route-widget))
  (s/valid? ::route-map (:routes-map (new-route-widget)))
(defn new-route-widget 
  "Essentially the simplest nangpress site possible, with a tutorial widget on the homepage." 
  []
  {:logo-data {:logo-style {:fontSize "200%"
                            :textTransform "inherit"}
               :logo-text (wd/widget-data 16)}
   :main-view-style {:style {:dispaly "inherit"
                             :paddingLeft "170px"
                             :paddingRight "170px"}} 
   :nav-style {:backgroundColor "#CE4072"}
   :route-widget-id 0
   :routes-map {:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                            :children [{:bg-img "http://wallpaper-gallery.net/images/minimal-wallpaper/minimal-wallpaper-17.jpg"
                                        :children []
                                        :grey-bg? true
                                        :nav-hint ["Architects"]
                                        :nav-hint-style {:color "black"}
                                        :route-name "/child-ola-ola"
                                        :route-name-editable (wd/widget-data 16)
                                        :widgets []}]
                            :grey-bg? true
                            :nav-hint ["Architects"]
                            :nav-hint-style {:color "black"}
                            :route-name "/parent-ola-ola"
                            :route-name-editable (wd/widget-data 16)
                            :widgets []}]
                :grey-bg? true
                :nav-hint ["Architects"] 
                :nav-hint-style {:color "black"}
                :route-name "/"
                :route-name-editable (wd/widget-data 16)
                :widgets [(wd/widget-data 15)]}})
(s/explain ::route-map (new-route-widget))
(s/valid? ::route-map (new-route-widget))
  (s/coll-of ::route-map [])
  (s/valid? ::route-map (:routes-map (new-route-widget)))
  (s/valid? ::route-map [])
(s/def ::children (s/coll-of (s/* ::route-map)))
  (s/valid? ::route-map [])
  (s/valid? ::children [])
(s/valid? ::renderable (site-meta->renderable 
                           nangpress.testdata/nangpress-data 
                           (mn/new-site-template) 1))
(s/valid? ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (mn/new-site-template) 1))
(s/valid? ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (new-site-template) 1))
(s/explain ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (new-site-template) 1))
l
(s/explain ::renderable (site-meta->renderable 
                           nnangpress.testdata/nangpress-data 
                           (new-site-template) 1))
  (s/valid? ::children [])
(s/def ::children (s/cat (s/* ::route-map)))
(s/def ::children (s/cat (s/* :route-map ::route-map)))
(s/def ::children (s/cat :route-map (s/* ::route-map)))
  (s/valid? ::children [])
(clj->js [])
(fb-write 
    "test" 
    (clj->js []) 
    )
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-write 
    "test" 
    (clj->js []) 
    )
(fb-write 
    "test" 
    (clj->js [000]) 
    )
(fb-write 
    "test" 
    (clj->js []) 
    )
l
(+ 2 3)
(def firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(map 
    (fn [x]
     (println x) 
      ) 
    firebase-empty-test)
(def firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(map 
    (fn [x]
     (println x) 
      ) 
    firebase-empty-test)
(map 
    (fn [x]
     (println x) 
      x
      ) 
    firebase-empty-test)
(map 
    (fn [x]
     (println x) 
      x
      ) 
    firebase-empty-test)
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= 000 (first x))) 
        [] 
        x)) 
    data))
(def firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(firebase-empty->clj-empty 
    firebase-empty-test)
(defn clj-empty->firebase-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (empty? x)) 
        [000] 
        x)) 
    data))
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= 000 (first x))) 
        [] 
        x)) 
    data))
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(firebase-empty->clj-empty 
    firebase->clojure-empty-test)
(clj-empty->firebase-empty 
    clojure->firebase-empty-test)
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(clj-empty->firebase-empty 
    clojure->firebase-empty-test)
(defn firebase-empty->clj-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (= 1 (count x)) 
          (= "empty" (first x))) 
        [] 
        x)) 
    data))
(defn clj-empty->firebase-empty 
  "Goiing from firebase representation of empty vector to a clj empty vector" 
  [data]
  (wlk/postwalk 
    (fn [x]   
      (if 
        (and 
          (vector? x) 
          (empty? x)) 
        ["empty"] 
        x)) 
    data))
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children [000]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children [000]}
                            {:data "hi"
                             :another "there"
                             :children [000]}]}]})
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(firebase-empty->clj-empty 
    firebase->clojure-empty-test)
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children ["empty"]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children ["empty"]}
                            {:data "hi"
                             :another "there"
                             :children ["empty"]}]}]})
(def firebase->clojure-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children ["empty"]}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children ["empty"]}
                            {:data "hi"
                             :another "there"
                             :children ["empty"]}]}]})
(def clojure->firebase-empty-test
    {:data "hi"
     :another "there"
     :children [{:data "hi"
                 :another "there"
                 :children []}
                {:data "hi"
                 :another "there"
                 :children [{:data "hi"
                             :another "there"
                             :children []}
                            {:data "hi"
                             :another "there"
                             :children []}]}]})
(firebase-empty->clj-empty 
    firebase->clojure-empty-test)
(clj-empty->firebase-empty 
    clojure->firebase-empty-test)
  (firebase-empty->clj-empty 
    firebase->clojure-empty-test)
  (def cache (firebase-empty->clj-empty 
               firebase->clojure-empty-test))
cache
  (get-in cache [:children 0 :children])
  (get-in cache [:children 0])
h  (get-in cache [:children 1 :children 0])
  (get-in cache [:children 1 :children 0])
  (get-in cache [:children 1 :children 0 :children])
  (get-in cache [:children 1 :children 1 :children])
l
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
  (fb/clj-empty->firebase-empty new-route-widget)
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
  (fb/clj-empty->firebase-empty new-route-widget)
  (fb/clj-empty->firebase-empty (new-route-widget))
(cljs.pprint/pprint
  (fb/clj-empty->firebase-empty (new-route-widget))
    )
  (def cache (fb/clj-empty->firebase-empty (new-route-widget)))
  (get-in cache [:routes-map :children 0 :widgets])
