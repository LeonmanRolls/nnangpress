load-data
@mn/monolith
(new-route
    "js-data/data"
    (clj->js @mn/monolith))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [cljs.reader :as rdr]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(new-route
    "js-data/data"
    (clj->js @mn/monolith))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [cljs.reader :as rdr]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
@mn/monolith
  (:test @mn/monolith)
(new-route
    "js-data/data"
    (clj->js 
      {:test ["/"]
       :current-route ["/"],
       :logo-text ["Solari"],
       :all-widgets-data [{:widget-uid 1, :object-id "a", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 2, :widget-name "Slider", :object-id "basdfafoi", :imgs [{:object-id "dsafoijlsaf", :url "http://placekitten.com/900/600"} {:object-id "asdfipwnelj", :url "http://placekitten.com/900/600"}]}
                          {:widget-uid 3, :object-id "b", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 4, :object-id "c", :widget-name "Accordion", :text [{:title {:widget-uid 1, :object-id "d", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}, :sub {:widget-uid 1, :object-id "e", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}}]}
                          {:widget-uid 5, :object-id "f", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 6, :object-id "g", :widget-name "Standard image widget", :img "http://placekitten.com/800/400"}
                          {:widget-uid 7, :object-id "h", :widget-name "Grid", :imgs [{:id "entry-1", :className "mega-entry", :data-src "http://placekitten.com/300/301", :data-width "320", :data-height "400"} {:id "entry-1-1", :className "mega-entry", :title "WE HAVE A LAUGH", :text "Cue James in a bald cap, need I say more?", :data-width "320", :data-height "400"}]}
                          {:widget-uid 9, :object-id "fdsaiwasasdfl", :widget-name "Sign in widget"}],
       :edit-mode [false],
       :route-widget {:route-widget-id 0,
                      :main-view-style {:style {}},
                      :routes-map {:route-name "/",
                                   :bg-img "http://www.startupnetcon.org/img/startupnetcon.jpg",
                                   :nav-hint ["Architects"], :nav-hint-style {:color "black"},
                                   :widgets [{:widget-uid 6, :object-id "sdafoiuewq", :widget-name "Standard image widget", :img "http://i.imgur.com/yxKTvJJ.png"}
                                             {:widget-uid 9, :object-id "90a48dde-a50f-46c8-9dd5-fa7f14ddd410", :widget-name "Sign in widget"}],
                                   :children []}}}))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [cljs.reader :as rdr]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(new-route
    "js-data/data"
    (clj->js 
      {:test ["/"]
       :current-route ["/"],
       :logo-text ["Solari"],
       :all-widgets-data [{:widget-uid 1, :object-id "a", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 2, :widget-name "Slider", :object-id "basdfafoi", :imgs [{:object-id "dsafoijlsaf", :url "http://placekitten.com/900/600"} {:object-id "asdfipwnelj", :url "http://placekitten.com/900/600"}]}
                          {:widget-uid 3, :object-id "b", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 4, :object-id "c", :widget-name "Accordion", :text [{:title {:widget-uid 1, :object-id "d", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}, :sub {:widget-uid 1, :object-id "e", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}}]}
                          {:widget-uid 5, :object-id "f", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 6, :object-id "g", :widget-name "Standard image widget", :img "http://placekitten.com/800/400"}
                          {:widget-uid 7, :object-id "h", :widget-name "Grid", :imgs [{:id "entry-1", :className "mega-entry", :data-src "http://placekitten.com/300/301", :data-width "320", :data-height "400"} {:id "entry-1-1", :className "mega-entry", :title "WE HAVE A LAUGH", :text "Cue James in a bald cap, need I say more?", :data-width "320", :data-height "400"}]}
                          {:widget-uid 9, :object-id "fdsaiwasasdfl", :widget-name "Sign in widget"}],
       :edit-mode [false],
       :route-widget {:route-widget-id 0,
                      :main-view-style {:style {}},
                      :routes-map {:route-name "/",
                                   :bg-img "http://www.startupnetcon.org/img/startupnetcon.jpg",
                                   :nav-hint ["Architects"], :nav-hint-style {:color "black"},
                                   :widgets [{:widget-uid 6, :object-id "sdafoiuewq", :widget-name "Standard image widget", :img "http://i.imgur.com/yxKTvJJ.png"}
                                             {:widget-uid 9, :object-id "90a48dde-a50f-46c8-9dd5-fa7f14ddd410", :widget-name "Sign in widget"}],
                                   :children []}}}))
(new-route
    "js-data/data"
    (clj->js 
      {:test ["/"]
       :current-route ["/"],
       :logo-text ["Solari"],
       :all-widgets-data [{:widget-uid 1, :object-id "a", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 2, :widget-name "Slider", :object-id "basdfafoi", :imgs [{:object-id "dsafoijlsaf", :url "http://placekitten.com/900/600"} {:object-id "asdfipwnelj", :url "http://placekitten.com/900/600"}]}
                          {:widget-uid 3, :object-id "b", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 4, :object-id "c", :widget-name "Accordion", :text [{:title {:widget-uid 1, :object-id "d", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}, :sub {:widget-uid 1, :object-id "e", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}}]}
                          {:widget-uid 5, :object-id "f", :widget-name "Standard text widget", :inner-html ["<p> Hi there </p>"]}
                          {:widget-uid 6, :object-id "g", :widget-name "Standard image widget", :img "http://placekitten.com/800/400"}
                          {:widget-uid 7, :object-id "h", :widget-name "Grid", :imgs [{:id "entry-1", :className "mega-entry", :data-src "http://placekitten.com/300/301", :data-width "320", :data-height "400"} {:id "entry-1-1", :className "mega-entry", :title "WE HAVE A LAUGH", :text "Cue James in a bald cap, need I say more?", :data-width "320", :data-height "400"}]}
                          {:widget-uid 9, :object-id "fdsaiwasasdfl", :widget-name "Sign in widget"}],
       :edit-mode [false],
       :route-widget {:route-widget-id 0,
                      :main-view-style {:style {}},
                      :routes-map {:route-name "/",
                                   :bg-img "http://www.startupnetcon.org/img/startupnetcon.jpg",
                                   :nav-hint ["Architects"], :nav-hint-style {:color "black"},
                                   :widgets [{:widget-uid 6, :object-id "sdafoiuewq", :widget-name "Standard image widget", :img "http://i.imgur.com/yxKTvJJ.png"}
                                             {:widget-uid 9, :object-id "90a48dde-a50f-46c8-9dd5-fa7f14ddd410", :widget-name "Sign in widget"}],
                                   :children []}}}))
(new-route
    "js-data/data/route-widget/main-nav-view-style"
    (clj->js {:style {}}))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [cljs.reader :as rdr]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(new-route
    "js-data/data/route-widget/main-nav-view-style"
    (clj->js {:style {}}))
(clj->js {:style {}})
(new-route
    "js-data/data/route-widget/main-nav-view-style"
    (clj->js {:style {}}))
(new-route
    "js-data/data/route-widget/main-nav-view-style"
    (clj->js {:style {}}))
  (load-data "defaultdata/data")
  (load-data "defaultdata/data" identity)
(defn load-data [route callback]
  (->
    (js/firebase.database)
    (.ref route)
    (.once "value")
    (.then (fn [snapshot]
             #_(println "snapshot: " (js->clj (.val snapshot) :keywordize-keys true))
             (callback (.val snapshot))))))
(defn load-data [route callback]
  (->
    (js/firebase.database)
    (.ref route)
    (.once "value")
    (.then (fn [snapshot]
             #_(println "snapshot: " (js->clj (.val snapshot) :keywordize-keys true))
             (callback (.val snapshot))))))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [cljs.reader :as rdr]))
(defn load-data [route callback]
  (->
    (js/firebase.database)
    (.ref route)
    (.once "value")
    (.then (fn [snapshot]
             #_(println "snapshot: " (js->clj (.val snapshot) :keywordize-keys true))
             (callback (.val snapshot))))))
  (load-data "defaultdata/data" identity)
  (load-data "defaultdata/data" (fn [x] (println x)))
@mn/monolith
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2"
    (clj->js @mn/monolith))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [cljs.reader :as rdr]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2"
    (clj->js @mn/monolith))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/site1"
    (clj->js @mn/monolith))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/site2"
    (clj->js @mn/monolith))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/site3"
    (clj->js @mn/monolith))
(new-route
    "defaultdata/homepage"
    (clj->js @mn/monolith))
(new-route
    "defaultdata/userhome"
    (clj->js @mn/monolith))
(:all-widgets-data @mn/monolith)
(new-route
    "defaultdata/all-widgets-data"
    (clj->js (:all-widgets-data @mn/monolith)))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]))
  (u/uid)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
  (->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (println "remote map: " remote-map)))))
(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (println "remote map: " remote-map)))))
(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (println "remote map: " remote-map)))))
(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (reset! cache remote-map)
               (println "remote map: " remote-map)))))
@cache
  (def cache (atom []))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
  (def cache (atom []))
(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (reset! cache remote-map)
               (println "remote map: " remote-map)))))
l
@cache
@mn/monolith
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
    (clj->js @mn/monolith))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
  (new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
    (clj->js @mn/monolith))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/0"
    (clj->js {:name "site1"
              :description "A site"
              :data @mn/monolith}))
(new-route
    "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites/1"
    (clj->js {:name "site2"
              :description "Another site"
              :data @mn/monolith}))
(->
    (js/firebase.database)
    (.ref (str "users/eKWcekJm6GMc4klsRG7CNvteCQN2/sites"))
    (.once "value")
    (.then (fn [snapshot]
             (let [remote-map (js->clj (.val snapshot) :keywordize-keys true)]
               (reset! cache remote-map)
               (println "remote map: " remote-map)))))
@cache
l
(empty? "")
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
(new-route
    "nangpress-data/"
    (clj->js {:name "site2"
              :description "Another site"
              :data @mn/monolith}))
  (new-route
    "nangpress-data/"
    (clj->js @mn/monolith))
(new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js @mn/monolith))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
(defn new-route [route data]
  (->
    (js/firebase.database)
    (.ref route)
    (.set data)))
  (new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js @mn/monolith))
@mn/monolith
(:route-widget @mn/monolith)
(new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js (:route-widget @mn/monolith)))
  (new-route
    "nangpress-data/route-widgets/userhome"
    (clj->js (:route-widget @mn/monolith)))
  (new-route
    "nangpress-data/route-widgets/homepage"
    (clj->js (:route-widget @mn/monolith)))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
)
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
 mn/monlith 
 mn/monolith 
  (keys mn/monolith)
  (keys @mn/monolith)
  (:all-widgets-data @mn/monolith)
@mn/monolith
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]))
:wgts/img
  (s/valid? :wgts/widget-data sample-data)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [clojure.spec :as s]))
  (s/valid? :wgts/widget-data sample-data)
  (def sample-data {:widget-uid 001
                    :object-id "23489-23fd9-sdf23-234hjh" 
                    :widget-name "Standard text widget"
                    :inner-html ["<p> Hi there </p>"]})
  (s/valid? :wgts/widget-data sample-data)
  (s/valid? :nnangpress.widgets/widget-data sample-data)
  (def sample-data {:widgetuid 001
                    :object-id "23489-23fd9-sdf23-234hjh" 
                    :widget-name "Standard text widget"
                    :inner-html ["<p> Hi there </p>"]})
  (s/valid? :nnangpress.widgets/widget-data sample-data)
  (def sample-data {:widget-uid 2
                    :object-id (u/uid)
                    :imgs [{:object-id (u/uid)
                            :url "http://placekitten.com/900/600"}
                           {:object-id (u/uid)
                            :url "http://placekitten.com/900/600"}]})
  (s/valid? :nnangpress.widgets/widget-data sample-data)
  (s/valid? ::wgts/widget-data sample-data)
  (s/def ::all-widgets-data (s/coll-of ::wgts/widget-data)  )
(:all-widgets-data @mn/monolith)
  (s/valid? ::all-widgets-data (:all-widgets-data @mn/monolith))
[sample-data]
  (s/valid? ::all-widgets-data [sample-data])
  (s/valid? ::all-widgets-data sample-data)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]))
  (s/checkable-syms)
  (s/instrument-all)
  (ts/instrument-all)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts]))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :refer-macros true]))
q
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
l
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
(start-repl)
(ns nnangpress.repl
  (:require [nnangpress.monolith :as mn]
            [nnangpress.utils :as u]
            [nnangpress.widgets :as wgts]
            [cljs.reader :as rdr]
            [ajax.core :refer [GET POST]]
            [cljs.spec :as s]
            [cljs.spec.test :as ts :include-macros true]))
  (ts/instrument-all)
  (ts/instrumentable-syms)
  (ts/instrument)
  (ts/instrumentable-syms)
  (ts/instrument)
  (ts/instrumentable-syms)
  (ts/instrument
  (ts/instrumentable-syms)
    )
q
(ts/instrumentable-syms)
  (ts/instrumentable-syms)
(ts/instrument
    'nnangpress.monolith
    )
  (ts/instrumentable-syms)
  (ts/instrument
    'nnangpress.monolith/update-all
    )
  (ts/instrument
    'nnangpress.monolith
    )
  (vector? [])
(start-repl)
l
(empty? [""])
(empty? [])
l
