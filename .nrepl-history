      (go 
       (<! (nnangpress.utils/timeout 1000))
       (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px")))
      )
      (take 10 (repeatedly #(rand-int 42)))
      )  
    )
l
(doseq
    (map 
      (fn [x]
        (go 
          (<! (nnangpress.utils/timeout 1000))
          (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px")))
        )
      (take 10 (repeatedly #(rand-int 42)))
      )  
    )
(go 
    (doseq
      (map 
        (fn [x]
          (<! (nnangpress.utils/timeout 1000))
          (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
          )
        (take 10 (repeatedly #(rand-int 42)))
        )  
      )  
    )
(go 
    (doseq
      (map 
        (fn [x]
          (<! (nnangpress.utils/timeout 1000))
          (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
          )
        (vec (take 10 (repeatedly #(rand-int 42))))
        )  
      )  
    )
(go 
    (doseq
      (fn [x]
        (<! (nnangpress.utils/timeout 1000))
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      (vec (take 10 (repeatedly #(rand-int 42))))
      )  
    )
l
(go 
    (doseq
      (fn [x]
        (<! (nnangpress.utils/timeout 1000))
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      (vec (take 10 (repeatedly #(rand-int 42))))
      )  
    )
(vec (take 10 (repeatedly #(rand-int 42))))
(doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )
(doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (go
        (<! (nnangpress.utils/timeout 1000))
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )
l
(go 
 (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )   
    )
(go 
 (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        #_(set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )   
    )
(go 
 (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (.log js/console "hi there")
        #_(set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )   
    )
(go 
 (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (.log js/console "hi there")
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )   
    )
l
(-> (ndom/get-node-by-id "body") .-style .-left)
(go 
 (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (.log js/console "hi there")
        (set! (-> (ndom/get-node-by-id "body") .-style .-left) (str x "px"))
        )
      )   
    )
q
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str "100" "px"))
(go 
 (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (.log js/console "hi there")
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (go
        (<! (nnangpress.utils/timeout 1000))
        (.log js/console "hi there")
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 1000))
        (.log js/console "hi there")
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 42)))] 
      (do
        (<! (nnangpress.utils/timeout 500))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 500))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 500))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "rotate(" x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        #_(aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "rotate(" x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        #_(aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "padding" (str x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "padding" (str x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        (aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "margin" (str x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        #_(aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "margin" (str x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        #_(aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "margin" (str x "px)"))
        )
      )   
    )
(go 
    (doseq [x (take 10 (repeatedly #(rand-int 100)))] 
      (do
        (<! (nnangpress.utils/timeout 100))
        #_(aset (-> (ndom/get-node-by-id "body") .-style) "left" (str x "px"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "margin" (str x "px)"))
        )
      )   
    )
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5" "deg)"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, 1  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
(do 
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
        (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 1000))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 500))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .5  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .9  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .9  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(2, .9  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.1, .9  " ")"))
    (<! (nnangpress.utils/timeout 500))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.1, .9  " ")"))
    (<! (nnangpress.utils/timeout 200))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.1, .9  " ")"))
    (<! (nnangpress.utils/timeout 200))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.1, .9  " ")"))
    (<! (nnangpress.utils/timeout 100))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.1, .9  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.1, .9  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")"))
    )
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.05, .95  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.05, .95  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.01, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.02, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.02, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.02, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(go 
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1.02, .99  " ")"))
    (<! (nnangpress.utils/timeout 150))
    (aset (-> (ndom/get-node-by-id "body") .-style) "transform" (str "scale(1, 1  " ")")))
(start-repl)
  (get-node-by-id "app")
(ns nnangpress.dom
  (:require 
    [om.core :as om]
    [cemerick.url :as url]))
  (get-node-by-id "app")
(defn get-node-by-id 
  "Get a dom node by id" 
  [id]
  (js/document.getElementById id))
  (get-node-by-id "app")
  (get-node-by-id "body")
  (type (get-node-by-id "body"))
(ns nnangpress.routing
  "Routing for a single page application. The bridge between the route in the browser bar and the application's 
  route state."
  (:import [goog.history Html5History EventType])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [goog.events :as ev]
            [goog.dom :as gdom]
            [nnangpress.utils :as utls]
            [nnangpress.monolith :as mn]))
(type (make-history))      
(make-history)
(type (Html5History.))      
l
(start-repl)
l
(start-repl)
l
(cljs-repl)
l
(start-repl)
(+ 2 3)
(+ 2 3 3 4 )
(ns nnangpress.monolith
  "Functions for reading and updating the monlith. Most side-effecting functions should go here."
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true :refer [set-state! update-state!]]
            [om.dom :as dom :include-macros true]
            [nnangpress.utils :as u]
            [nnangpress.dom :as ndom]
            [nnangpress.specs :as spcs]
            [nnangpress.widgetdata :as wd]
            [clojure.zip :as z]
            [clojure.spec :as s]
            [clojure.walk :as wlk]
            [cljs.core.async :refer [put! chan <!]]
            [nnangpress.firebase :as fb]))
monolith
(:screen-size @monolith)
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(current-user)
  (.log js/console (current-user))
(fb-copy 
    "/nangpress-data/admin-sites/userhome/route-widget/routes-map/widgets/1" 
    "/nangpress-data/admin-sites/userhome/route-widget/routes-map/widgets/0")
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(start-repl)
(ns nnangpress.firebase
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require 
    [nnangpress.utils :as u]
    [clojure.walk :as wlk]
    [cljs.core.async :refer [put! chan <!]]))
(fb-copy 
    "/nangpress-data/admin-sites/userhome/route-widget/routes-map/widgets/1" 
    "/nangpress-data/admin-sites/userhome/route-widget/routes-map/widgets/0")
